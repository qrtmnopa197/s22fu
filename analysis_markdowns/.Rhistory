knitr::opts_chunk$set(echo = TRUE)
options(mc.cores=6)
##SET MANUALLY
path_to_project_directory <- "~/projects/spring_2022_study/"
##############
stan_model_dir <- paste0(path_to_project_directory,"code/stan_models/final_models/")
model_out_dir <- paste0(path_to_project_directory,"output/results/stan_model_fits/final_models/")
library(cmdstanr)
library(tidyverse)
library(bayesplot)
library(tidybayes)
library(grid)
library(abind)
library(patchwork)
source(paste0(path_to_project_directory,"code/functions/s22_utilities.R"))
source(paste0(path_to_project_directory,"code/functions/stan_utilities.R"))
source(paste0(path_to_project_directory,"code/functions/fit_stan_model.R"))
trials <- read.csv(paste0(path_to_project_directory,"analysis_data/trial_level_data_all_subs_2022-05-22_19_14_57.csv"))
subs <- read.csv(paste0(path_to_project_directory,"analysis_data/sub_level_data_all_subs_2022-05-22_19_14_57.csv"))
#identify subjects who fail the hard QC cutoffs
sub_hard_fail <- subs %>% filter(att_checks_passed == 0 |
percent_left > .8 |
percent_left < .2 |
consecutive_late_choices > 5 |
late_percent > .2 |
answers_incorrect > 2 |
trials_completed < 126 |
probe_skipped_percent > .14 |
id %in% c(86956,86746,86839,80227,79198,86503,86869,85588))
#count the number of soft QC cutoffs each subject meets
subs$softs <- 0
for(i in 1:nrow(subs)){
subs$softs[i] <- length(which(c(subs$consecutive_auto_process[i] > 4,subs$att_checks_passed[i] == 1,subs$answers_incorrect[i] > 1,
subs$late_percent[i] > .1,subs$probe_skipped_percent[i] > .07,subs$noprobe_pt_choices[i] == 0,subs$probe_pt_choices[i] == 0)))
}
sub_soft_fail <- filter(subs,softs >= 2) #identify those who meet more than 2 soft cutoffs
subs_to_exclude <- unique(c(sub_hard_fail$id,sub_soft_fail$id)) #mark subjects who fail on either hard or soft or criteria for exclusion
trials <- trials %>% filter(!(id %in% subs_to_exclude)) %>% filter(choice != "late") #filter out bad subjects, as well as trials on which the subject failed to make a choice
subs <- subs %>% filter(!(id %in% subs_to_exclude))
#trials <- trials %>% filter(!(id %in% c(86077,86134,86356,87163,86458,85588,86869,86956,86746,79198,86359,86503,86881))) %>% filter(choice != "late")
trials <- add_sub_indices(trials) #add subject indices to the df. These will match the indices used in Stan.
#convert affect ratings to subject-by-subject z-scores, to control for intersubject differences in rating variability
trials[c("valence_dec","valence_feed")] <- trials[c("valence_dec","valence_feed")]*-1 #flip the affect ratings, so that the low numbers
#correspond to low values of valence
trials <- do.call(rbind,by(trials,trials$id,col_zscore,c("valence_dec","valence_feed"))) #translate valence ratings to z-scores
#add a column with the affect probe number for each subject (999 if no probe response). These will be passed into Stan
trials <- add_probe_number(trials,newcol="dec_probe_number",val_col="valence_dec",arous_col="arousal_dec") #for decision probes
trials <- add_probe_number(trials,newcol="feed_probe_number",val_col="valence_feed",arous_col="arousal_feed") #for feedback probes
#add a column with completed trial numbers - the trial indices if you ignore late trials. These will match the "t" trial numbers used in the Stan models
trials <- do.call(rbind,by(trials,trials$sub_index,add_trials_nl))
trials$overall_trial_nl <- 1:nrow(trials) #get the overall trial number ignoring late trials and collapsing across subjects
trials <- trials %>% mutate(dec_probe_completed = if_else(is.na(arousal_dec) | is.na(valence_dec),0,1)) #add a 1/0 column indicating whether a
#decision probe was completed on each trial
trials <- trials %>% mutate(feed_probe_completed = if_else(is.na(arousal_feed) | is.na(valence_feed),0,1)) #diddo feedback
#get mean-centeedr trial and block predictors for easier fitting in Stan
trials$trial_nl_cent <- trials$trial_nl - mean(trials$trial_nl)
trials$block_cent <- trials$block - mean(trials$block)
#get the chosen fractal index
trials <- trials %>% mutate(chosen_frac = ifelse(choice == "fractal_a_dec",fractal_a_num,fractal_b_num))
trials <- trials %>% mutate(unchosen_frac = ifelse(choice == "fractal_a_dec",fractal_b_num,fractal_a_num))
#add columns showing the pairs at play in each block
new_trials_list <- by(trials,trials$id,create_pair_cols_sub)
trials <- do.call(rbind,new_trials_list)
nrow(trials)/126
knitr::opts_chunk$set(echo = TRUE)
options(mc.cores=6)
##SET MANUALLY
path_to_project_directory <- "~/projects/spring_2022_study/"
##############
stan_model_dir <- paste0(path_to_project_directory,"code/stan_models/final_models/")
model_out_dir <- paste0(path_to_project_directory,"output/results/stan_model_fits/final_models/")
library(cmdstanr)
library(tidyverse)
library(bayesplot)
library(tidybayes)
library(grid)
library(abind)
library(patchwork)
source(paste0(path_to_project_directory,"code/functions/s22_utilities.R"))
source(paste0(path_to_project_directory,"code/functions/stan_utilities.R"))
source(paste0(path_to_project_directory,"code/functions/fit_stan_model.R"))
trials <- read.csv(paste0(path_to_project_directory,"analysis_data/trial_level_data_all_subs_2022-05-22_19_14_57.csv"))
subs <- read.csv(paste0(path_to_project_directory,"analysis_data/sub_level_data_all_subs_2022-05-22_19_14_57.csv"))
#identify subjects who fail the hard QC cutoffs
sub_hard_fail <- subs %>% filter(att_checks_passed == 0 |
percent_left > .8 |
percent_left < .2 |
consecutive_late_choices > 5 |
late_percent > .2 |
answers_incorrect > 2 |
trials_completed < 126 |
probe_skipped_percent > .14 |
id %in% c(86956,86746,86839,80227,79198,86503,86869,85588))
#count the number of soft QC cutoffs each subject meets
subs$softs <- 0
for(i in 1:nrow(subs)){
subs$softs[i] <- length(which(c(subs$consecutive_auto_process[i] > 4,subs$att_checks_passed[i] == 1,subs$answers_incorrect[i] > 1,
subs$late_percent[i] > .1,subs$probe_skipped_percent[i] > .07,subs$noprobe_pt_choices[i] == 0,subs$probe_pt_choices[i] == 0)))
}
sub_soft_fail <- filter(subs,softs >= 2) #identify those who meet more than 2 soft cutoffs
subs_to_exclude <- unique(c(sub_hard_fail$id,sub_soft_fail$id)) #mark subjects who fail on either hard or soft or criteria for exclusion
trials <- trials %>% filter(!(id %in% subs_to_exclude)) %>% filter(choice != "late") #filter out bad subjects, as well as trials on which the subject failed to make a choice
subs <- subs %>% filter(!(id %in% subs_to_exclude))
#trials <- trials %>% filter(!(id %in% c(86077,86134,86356,87163,86458,85588,86869,86956,86746,79198,86359,86503,86881))) %>% filter(choice != "late")
trials <- add_sub_indices(trials) #add subject indices to the df. These will match the indices used in Stan.
#convert affect ratings to subject-by-subject z-scores, to control for intersubject differences in rating variability
trials[c("valence_dec","valence_feed")] <- trials[c("valence_dec","valence_feed")]*-1 #flip the affect ratings, so that the low numbers
#correspond to low values of valence
trials <- do.call(rbind,by(trials,trials$id,col_zscore,c("valence_dec","valence_feed"))) #translate valence ratings to z-scores
#add a column with the affect probe number for each subject (999 if no probe response). These will be passed into Stan
trials <- add_probe_number(trials,newcol="dec_probe_number",val_col="valence_dec",arous_col="arousal_dec") #for decision probes
trials <- add_probe_number(trials,newcol="feed_probe_number",val_col="valence_feed",arous_col="arousal_feed") #for feedback probes
#add a column with completed trial numbers - the trial indices if you ignore late trials. These will match the "t" trial numbers used in the Stan models
trials <- do.call(rbind,by(trials,trials$sub_index,add_trials_nl))
trials$overall_trial_nl <- 1:nrow(trials) #get the overall trial number ignoring late trials and collapsing across subjects
trials <- trials %>% mutate(dec_probe_completed = if_else(is.na(arousal_dec) | is.na(valence_dec),0,1)) #add a 1/0 column indicating whether a
#decision probe was completed on each trial
trials <- trials %>% mutate(feed_probe_completed = if_else(is.na(arousal_feed) | is.na(valence_feed),0,1)) #diddo feedback
#get mean-centeedr trial and block predictors for easier fitting in Stan
trials$trial_nl_cent <- trials$trial_nl - mean(trials$trial_nl)
trials$block_cent <- trials$block - mean(trials$block)
#get the chosen fractal index
trials <- trials %>% mutate(chosen_frac = ifelse(choice == "fractal_a_dec",fractal_a_num,fractal_b_num))
trials <- trials %>% mutate(unchosen_frac = ifelse(choice == "fractal_a_dec",fractal_b_num,fractal_a_num))
#add columns showing the pairs at play in each block
new_trials_list <- by(trials,trials$id,create_pair_cols_sub)
trials <- do.call(rbind,new_trials_list)
asens_draws <- arl$fit$draws("aff_sens_mu")
mcmc_areas(
asens_draws,
area_method = "scaled height",
prob = 0.95,
prob_outer = 0.975,
point_est = "median"
)
beta_draws <- arl$fit$draws("beta_mu")
mcmc_areas(
beta_draws,
area_method = "scaled height",
prob = 0.95,
prob_outer = 0.975,
point_est = "median"
)
mcmc_areas(
asens_draws,
area_method = "scaled height",
prob = 0.9,
prob_outer = 0.99,
point_est = "median"
)
mcmc_areas(
beta_draws,
area_method = "scaled height",
prob = 0.95,
prob_outer = 0.975,
point_est = "median"
)
mcmc_areas(
beta_draws,
area_method = "scaled height",
prob = 0.9,
prob_outer = 0.99,
point_est = "median"
)
mcmc_areas(
beta_draws,
area_method = "scaled height",
prob = 0.9,
prob_outer = 0.99,
point_est = "median"
) +
lims(x=0)
mcmc_areas(
beta_draws,
area_method = "scaled height",
prob = 0.9,
prob_outer = 0.99,
point_est = "median"
) +
coord_cartesian(xlim = 0)
mcmc_areas(
beta_draws,
area_method = "scaled height",
prob = 0.9,
prob_outer = 0.99,
point_est = "median"
) +
coord_cartesian(xlim = c(0,NA))
mcmc_areas(
asens_draws,
area_method = "scaled height",
prob = 0.9,
prob_outer = 0.99,
point_est = "median"
)
