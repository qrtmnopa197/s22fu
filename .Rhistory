p
df <- read_csv(p)
df
if(nrow(df) > 0){
row <- row + 1
if(is.na(df$id[1])){
ps_ids$id[row] <- NA
} else {
ps_ids$id[row] <- df$id[1]
}
if(is.na(df$participant[1])){
ps_ids$ps[row] <- NA
} else{
ps_ids$ps[row] <- df$participant[1]
}
}
view(ps_ids$ps[row])
#get ps and Ids
paths <- list.files("/Users/dp/projects/s22_follow_up/input_data",full.names = TRUE) %>% grep("/[0-9][^_/]*_(s22|arl|arlbv|s22fu)_task.*.csv",.,value = T)
ps_ids <- data.frame(ids=rep(NA,length(paths)),ps=rep(NA,length(paths)))
row <- 0
paths <- paths[c(1:10)]
for(p in paths){
df <- read_csv(p) #read in data
if(nrow(df) > 0){
#if this is a dataset
row <- row + 1
if(is.na(df$id[1])){
ps_ids$id[row] <- NA
} else {
ps_ids$id[row] <- df$id[1]
}
if(is.na(df$participant[1])){
ps_ids$ps[row] <- NA
} else{
ps_ids$ps[row] <- df$participant[1]
}
}
}
view(ps_ids %>% filter(id %in% prolif_nocodes$Participant.id))
paths
p <- "/Users/dp/projects/s22_follow_up/input_data/102_s22fu_task_2023-06-10_16h18.40.042.csv"
row
row <- 0
df <- read_csv(p) #read in data
if(nrow(df) > 0){
#if this is a dataset
row <- row + 1
if(is.na(df$id[1])){
ps_ids$id[row] <- NA
} else {
ps_ids$id[row] <- df$id[1]
}
if(is.na(df$participant[1])){
ps_ids$ps[row] <- NA
} else{
ps_ids$ps[row] <- df$participant[1]
}
}
for(p in paths){
df <- read_csv(p) #read in data
if(nrow(df) > 0){
#if this is a dataset
row <- row + 1
if(is.na(df$id[1])){
ps_ids$id[row] <- NA
} else {
ps_ids$id[row] <- df$id[1]
}
if(is.na(df$participant[1])){
ps_ids$ps[row] <- NA
} else{
ps_ids$ps[row] <- df$participant[1]
}
}
}
view(ps_ids %>% filter(id %in% prolif_nocodes$Participant.id))
paths <- list.files("/Users/dp/projects/s22_follow_up/input_data",full.names = TRUE) %>% grep("/[0-9][^_/]*_(s22|arl|arlbv|s22fu)_task.*.csv",.,value = T)
ps_ids <- data.frame(ids=rep(NA,length(paths)),ps=rep(NA,length(paths)))
row <- 0
for(p in paths){
df <- read_csv(p) #read in data
if(nrow(df) > 0){
#if this is a dataset
row <- row + 1
if(is.na(df$id[1])){
ps_ids$id[row] <- NA
} else {
ps_ids$id[row] <- df$id[1]
}
if(is.na(df$participant[1])){
ps_ids$ps[row] <- NA
} else{
ps_ids$ps[row] <- df$participant[1]
}
}
}
view(ps_ids %>% filter(id %in% prolif_nocodes$Participant.id))
write.csv(ps_ids,"/Users/dp/projects/s22_follow_up/analysis_data/ps_ids.csv)
write.csv(ps_ids,"/Users/dp/projects/s22_follow_up/analysis_data/ps_ids.csv")
write.csv(ps_ids,"/Users/dp/projects/s22_follow_up/analysis_data/ps_ids.csv")
view(ps_ids)
subs <- read.csv("/Users/dp/projects/s22_follow_up/analysis_data/sub_level_data_all_subs_2023-06-11_14_53_12.csv")
sub_hard_fail <- subs %>% filter(att_checks_passed < 3 |
percent_left > .8 |
percent_left < .2 |
consecutive_late_choices > 5 |
late_percent > .2 |
answers_incorrect > 2 |
trials_completed < 104 |
valrate_skipped_percent > .14 |
valence_sd < .1 |
decrate_sd < .05 |
feedrate_sd < .05)
#count the number of soft QC cutoffs each subject meets
subs$softs <- 0
for(i in 1:nrow(subs)){
subs$softs[i] <- length(which(c(subs$consecutive_auto_process[i] > 4,subs$att_checks_passed[i] < 4,subs$answers_incorrect[i] > 1,
subs$late_percent[i] > .1,subs$valrate_skipped_percent[i] > .07,
subs$choice_pt_completed[i] == 0, subs$decrate_pt_completed[i] == 0, subs$feedrate_pt_completed == 0)))
}
sub_soft_fail <- filter(subs,softs >= 2) #identify those who meet more than 2 soft cutoffs
subs_to_exclude <- unique(c(sub_hard_fail$id,sub_soft_fail$id)) #mark subjects who fail on either hard or soft or criteria for exclusion
nrow(subs)
length(subs_to_exclude)
184-66
path_to_project_directory <- "~/projects/s22_follow_up/"
path_to_s22 <- "~/projects/spring_2022_study/"
path_to_arlbv <- "~/projects/ARL_BV/"
ids_to_exclude <- c(1:39,522,142) #Ps whose data you don't want to analyze even if it looks good. Exclude 86041 - the test code - and 1 - obviously a pilot ID code.
##############
#clear out results from old analyses
system("mv /Users/dp/projects/s22_follow_up/analysis_data/*.csv /Users/dp/projects/s22_follow_up/analysis_data/old_analysis_data") #move any CSV files in this folder to old_analysis_data folder
system("rm -rf /Users/dp/projects/s22_follow_up/analysis_data/qc_plots/trial_level_vars/*") #clear the folder containing trial-level plots
system("rm -f /Users/dp/projects/s22_follow_up/analysis_data/qc_plots/sub_level_variables.pdf") #remove old subject level variable plot
source(paste0(path_to_s22,"code/functions/s22_utilities.R")) #get s22 functions
source(paste0(path_to_project_directory,"code/functions/s22fu_wrangle_psychopy_data.R"))
source(paste0(path_to_project_directory,"code/functions/s22fu_utilities.R"))
source(paste0(path_to_arlbv,"code/functions/arlbv_utilities.R")) #get ARL-BV functions
csvs_to_analyze <- get_csvs_to_analyze(path_to_project_directory,ids_to_exclude) #get the usable CSVs to analyze
all_data <- lapply(csvs_to_analyze, s22fu_wrangle_psychopy_data) #reformats each CSV, turning it into a long dataset usable for analysis, and adds all variables of interest that can be created from the raw data alone.
#Returns a list - one element for each subject - where each element is itself a list containing dfs with the trial-level data and subject-level data
trials_list <- lapply(all_data, function(l) l[[1]]) #get a list of the trial-level dfs only
trial_level_data <- do.call(rbind,trials_list) #stack trial dfs into one big df
sub_list <- lapply(all_data, function(l) l[[2]]) #get a list of the subject-level dfs only
sub_level_data <- do.call(rbind,sub_list) #stack them into one big data frame
#write both to CSVs
date_time <- Sys.time() %>% chartr(" ","_",.) %>% chartr(":","_",.) #grab the date and time, reformatting ':' and '-' to  '_' so you can label the files with it
write.csv(trial_level_data,paste0(path_to_project_directory,"analysis_data/trial_level_data_all_subs_",date_time,".csv"),row.names = FALSE)
#write subject-level data
write.csv(sub_level_data,paste0(path_to_project_directory,"analysis_data/sub_level_data_all_subs_",date_time,".csv"),row.names = FALSE)
#HERE
#Create plot grids of select variables for quality checking. These are saved to the qc_plots folder
tl_hists <- c("decrate_rt","feedrate_rt", "choice_rt","dec_rate","feed_rate") #trial level variables to plot
plot_trial_level_vars(trial_level_data,tl_hists,path_to_project_directory) #create and save plot grids
sl_hists <- c("consecutive_late_choices","instruct_keypress","consecutive_autoprocess",
"choice_pt_completed","decrate_pt_completed","feedrate_pt_completed",
"answers_correct","answers_incorrect","earnings_before_ec",
"feed_check_passed","feedrate_check_passed","decrate_check_passed","att_checks_passed",
"percent_left","percent_left_b1","percent_left_b2","late_percent","trials_completed","decrate_skipped_percent","feedrate_skipped_percent","valrate_skipped_percent",
"decrate_sd","feedrate_sd","valence_sd","total_experiment_time") #subject-level variables to plot
plot_sub_level_vars(sub_level_data,sl_hists,path_to_project_directory) #create and save plot grids
knitr::opts_chunk$set(echo = TRUE)
options(mc.cores=6)
##SET MANUALLY
path_to_project_directory <- "~/projects/s22_follow_up/"
path_to_s22 <- "~/projects/spring_2022_study/"
##############
stan_model_dir_s22fu <- paste0(path_to_project_directory,"code/stan_models/")
stan_model_dir_s22 <- paste0(path_to_s22,"code/stan_models/final_models/")
model_out_dir <- paste0(path_to_project_directory,"output/results/stan_model_fits/")
library(GGally)
library(cmdstanr)
library(tidyverse)
library(tidybayes)
library(loo)
library(bayesplot)
library(sigmoid)
source(paste0(path_to_project_directory,"code/functions/s22fu_utilities.R"))
source(paste0(path_to_s22,"code/functions/s22_utilities.R"))
source(paste0(path_to_s22,"code/functions/stan_utilities.R"))
source(paste0(path_to_s22,"code/functions/fit_stan_model.R"))
trials <- read.csv(paste0(path_to_project_directory,"analysis_data/trial_level_data_all_subs_2023-06-12_09_56_03.csv"))
subs <- read.csv(paste0(path_to_project_directory,"analysis_data/sub_level_data_all_subs_2023-06-12_09_56_03.csv"))
#identify subjects who fail the hard QC cutoffs
sub_hard_fail <- subs %>% filter(att_checks_passed < 3 |
percent_left > .8 |
percent_left < .2 |
consecutive_late_choices > 5 |
late_percent > .2 |
answers_incorrect > 2 |
trials_completed < 104 |
valrate_skipped_percent > .14 |
valence_sd < .1 |
decrate_sd < .05 |
feedrate_sd < .05)
#count the number of soft QC cutoffs each subject meets
subs$softs <- 0
for(i in 1:nrow(subs)){
subs$softs[i] <- length(which(c(subs$consecutive_auto_process[i] > 4,subs$att_checks_passed[i] < 4,subs$answers_incorrect[i] > 1,
subs$late_percent[i] > .1,subs$valrate_skipped_percent[i] > .07,
subs$choice_pt_completed[i] == 0, subs$decrate_pt_completed[i] == 0, subs$feedrate_pt_completed == 0)))
}
sub_soft_fail <- filter(subs,softs >= 2) #identify those who meet more than 2 soft cutoffs
subs_to_exclude <- unique(c(sub_hard_fail$id,sub_soft_fail$id)) #mark subjects who fail on either hard or soft or criteria for exclusion
trials <- trials %>% filter(!(id %in% subs_to_exclude)) %>% filter(choice != "late") #filter out bad subjects, as well as trials on which the subject failed to make a choice
#trials <- trials %>% filter(!(id %in% c(86077,86134,86356,87163,86458,85588,86869,86956,86746,79198,86359,86503,86881))) %>% filter(choice != "late")
nrow(subs)
length(subs_to_exclude)
192-71
subs <- subs[-nrow(subs)]
nrow(subs)
subs <- read.csv(paste0(path_to_project_directory,"analysis_data/sub_level_data_all_subs_2023-06-12_09_56_03.csv"))
subs <- subs[-nrow(subs),]
nrow(subs)
view(trials)
subs <- read.csv(paste0(path_to_project_directory,"analysis_data/sub_level_data_all_subs_2023-06-12_09_56_03.csv"))
trials <- read.csv(paste0(path_to_project_directory,"analysis_data/trial_level_data_all_subs_2023-06-12_09_56_03.csv"))
max(subs$date)
subs <- subs %>% filter(date != last_sub)
last_sub <- max(subs$date)
subs <- subs %>% filter(date != last_sub)
nrow(subs)
nrow(trials)
trials <- trials %>% filter(date != last_sub)
trials
nrow(trials)
20901-20795
104*120
trials <- read.csv(paste0(path_to_project_directory,"analysis_data/trial_level_data_all_subs_2023-06-12_09_56_03.csv"))
subs <- read.csv(paste0(path_to_project_directory,"analysis_data/sub_level_data_all_subs_2023-06-12_09_56_03.csv"))
sub_hard_fail <- subs %>% filter(att_checks_passed < 3 |
percent_left > .8 |
percent_left < .2 |
consecutive_late_choices > 5 |
late_percent > .2 |
answers_incorrect > 2 |
trials_completed < 104 |
valrate_skipped_percent > .14 |
valence_sd < .1 |
decrate_sd < .05 |
feedrate_sd < .05)
#count the number of soft QC cutoffs each subject meets
subs$softs <- 0
for(i in 1:nrow(subs)){
subs$softs[i] <- length(which(c(subs$consecutive_auto_process[i] > 4,subs$att_checks_passed[i] < 4,subs$answers_incorrect[i] > 1,
subs$late_percent[i] > .1,subs$valrate_skipped_percent[i] > .07,
subs$choice_pt_completed[i] == 0, subs$decrate_pt_completed[i] == 0, subs$feedrate_pt_completed == 0)))
}
sub_soft_fail <- filter(subs,softs >= 2) #identify those who meet more than 2 soft cutoffs
subs_to_exclude <- unique(c(sub_hard_fail$id,sub_soft_fail$id)) #mark subjects who fail on either hard or soft or criteria for exclusion
trials <- trials %>% filter(!(id %in% subs_to_exclude)) %>% filter(choice != "late") #filter out bad subjects, as well as trials on which the subject failed to make a choice
#trials <- trials %>% filter(!(id %in% c(86077,86134,86356,87163,86458,85588,86869,86956,86746,79198,86359,86503,86881))) %>% filter(choice != "late")
last_sub <- max(subs$date)
subs <- subs %>% filter(date != last_sub)
trials <- trials %>% filter(date != last_sub)
nrow(subs)
nrow(trials)
124800/104
12480/104
trials <- add_sub_indices(trials) #add subject indices to the df. These will match the indices used in Stan.
#add a column with completed trial numbers - the trial indices if you ignore late trials. These will match the "t" trial numbers used in the Stan models
trials <- do.call(rbind,by(trials,trials$sub_index,add_trials_nl))
trials$overall_trial_nl <- 1:nrow(trials) #get the overall trial number ignoring late trials and collapsing across subjects
#get mean-centered trial and block predictors for easier fitting in Stan
trials$trial_nl_cent <- trials$trial_nl - mean(trials$trial_nl)
trials$block_cent <- trials$block - mean(trials$block)
#Create indices from 1:n_f for each fractal image. To do this, first create a mini-df with one column having all the fA_img values and the other two
#columns having indices for fA and fB. This assumes that every fA_img is paired with a unique fB_img.
f_index_df <- data.frame(fA_img = unique(trials$fA_img),fA_ix = 1:length(unique(trials$fA_img)),fB_ix = (1:length(unique(trials$fA_img))+length(unique(trials$fA_img))))
trials <- left_join(trials,f_index_df,by="fA_img")
#get the chosen fractal index
trials <- trials %>% mutate(chosen_frac = ifelse(choice == "fA",fA_ix,fB_ix))
trials <- trials %>% mutate(unchosen_frac = ifelse(choice == "fA",fB_ix,fA_ix))
#add a column with the affect probe number for each subject (999 if no probe response). These will be passed into Stan
trials <- add_probe_number(trials,newcol="dec_probe_number",val_col="dec_rate") #for decision probes
trials <- add_probe_number(trials,newcol="feed_probe_number",val_col="feed_rate") #for decision probes
percentage_plots(trials,"stay")
choice_fit <- lmer(choice_numeric ~ fB_win_prob + fA_win_prob + (1|id),trials)
summary(choice_fit)
stay_fit <- lmer(stay ~ chosen_out + unchosen_out + (1|id),trials)
summary(stay_fit)
basic_qlearn$diagnostics
autocor_qlearn$diagnostics
filter(basic_qlearn$diagnostics$Rhat, sd!= 0)
tail(basic_qlearn$diagnostics$Rhat)
tail(autocor_qlearn$diagnostics$Rhat)
120*4
fsml_compare(basic_qlearn,autocor_qlearn)
fsml_compare(autocor_qlearn,autocor_qlearn_sidebias)
autocor_alphforget_qlearn$diagnostics
autocor_hierforget_qlearn$diagnostics
fsml_compare(autocor_qlearn,autocor_alphforget_qlearn,autocor_hierforget_qlearn)
fsml_compare(autocor_qlearn,autocor_alphforget_qlearn)
ncp_mean_hist(autocor_hierforget_qlearn$sum,"beta")
filt_sum(autocor_hierforget_qlearn$sum,"mu")
sigmoid(-.061)
sigmoid(-.317)
sigmoid(-1.45)
filt_sum(basic_qlearn$sum,"mu")
sigmoid(-1.52)
autocor_alphforget_qlearn <- 0
autocor_hierforget_qlearn <- 0
autocor_qlearn_sidebias <- 0
knitr::opts_chunk$set(echo = TRUE)
options(mc.cores=6)
##SET MANUALLY
path_to_project_directory <- "~/projects/s22_follow_up/"
path_to_s22 <- "~/projects/spring_2022_study/"
##############
stan_model_dir_s22fu <- paste0(path_to_project_directory,"code/stan_models/")
stan_model_dir_s22 <- paste0(path_to_s22,"code/stan_models/final_models/")
model_out_dir <- paste0(path_to_project_directory,"output/results/stan_model_fits/")
library(GGally)
library(cmdstanr)
library(tidyverse)
library(tidybayes)
library(loo)
library(bayesplot)
library(sigmoid)
source(paste0(path_to_project_directory,"code/functions/s22fu_utilities.R"))
source(paste0(path_to_s22,"code/functions/s22_utilities.R"))
source(paste0(path_to_s22,"code/functions/stan_utilities.R"))
source(paste0(path_to_s22,"code/functions/fit_stan_model.R"))
trials <- read.csv(paste0(path_to_project_directory,"analysis_data/trial_level_data_all_subs_2023-06-12_09_56_03.csv"))
subs <- read.csv(paste0(path_to_project_directory,"analysis_data/sub_level_data_all_subs_2023-06-12_09_56_03.csv"))
#identify subjects who fail the hard QC cutoffs
sub_hard_fail <- subs %>% filter(att_checks_passed < 3 |
percent_left > .8 |
percent_left < .2 |
consecutive_late_choices > 5 |
late_percent > .2 |
answers_incorrect > 2 |
trials_completed < 104 |
valrate_skipped_percent > .14 |
valence_sd < .1 |
decrate_sd < .05 |
feedrate_sd < .05)
#count the number of soft QC cutoffs each subject meets
subs$softs <- 0
for(i in 1:nrow(subs)){
subs$softs[i] <- length(which(c(subs$consecutive_auto_process[i] > 4,subs$att_checks_passed[i] < 4,subs$answers_incorrect[i] > 1,
subs$late_percent[i] > .1,subs$valrate_skipped_percent[i] > .07,
subs$choice_pt_completed[i] == 0, subs$decrate_pt_completed[i] == 0, subs$feedrate_pt_completed == 0)))
}
sub_soft_fail <- filter(subs,softs >= 2) #identify those who meet more than 2 soft cutoffs
subs_to_exclude <- unique(c(sub_hard_fail$id,sub_soft_fail$id)) #mark subjects who fail on either hard or soft or criteria for exclusion
trials <- trials %>% filter(!(id %in% subs_to_exclude)) %>% filter(choice != "late") #filter out bad subjects, as well as trials on which the subject failed to make a choice
#trials <- trials %>% filter(!(id %in% c(86077,86134,86356,87163,86458,85588,86869,86956,86746,79198,86359,86503,86881))) %>% filter(choice != "late")
#This leaves us with one more subject than was preregistered, so I'm deleted the last subject that was collected from the dataset
last_sub <- max(subs$date)
subs <- subs %>% filter(date != last_sub)
trials <- trials %>% filter(date != last_sub)
trials <- add_sub_indices(trials) #add subject indices to the df. These will match the indices used in Stan.
#add a column with completed trial numbers - the trial indices if you ignore late trials. These will match the "t" trial numbers used in the Stan models
trials <- do.call(rbind,by(trials,trials$sub_index,add_trials_nl))
trials$overall_trial_nl <- 1:nrow(trials) #get the overall trial number ignoring late trials and collapsing across subjects
#get mean-centered trial and block predictors for easier fitting in Stan
trials$trial_nl_cent <- trials$trial_nl - mean(trials$trial_nl)
trials$block_cent <- trials$block - mean(trials$block)
#Create indices from 1:n_f for each fractal image. To do this, first create a mini-df with one column having all the fA_img values and the other two
#columns having indices for fA and fB. This assumes that every fA_img is paired with a unique fB_img.
f_index_df <- data.frame(fA_img = unique(trials$fA_img),fA_ix = 1:length(unique(trials$fA_img)),fB_ix = (1:length(unique(trials$fA_img))+length(unique(trials$fA_img))))
trials <- left_join(trials,f_index_df,by="fA_img")
#get the chosen fractal index
trials <- trials %>% mutate(chosen_frac = ifelse(choice == "fA",fA_ix,fB_ix))
trials <- trials %>% mutate(unchosen_frac = ifelse(choice == "fA",fB_ix,fA_ix))
#add a column with the affect probe number for each subject (999 if no probe response). These will be passed into Stan
trials <- add_probe_number(trials,newcol="dec_probe_number",val_col="dec_rate") #for decision probes
trials <- add_probe_number(trials,newcol="feed_probe_number",val_col="feed_rate") #for decision probes
fsml_compare(combined_noshrink,pe_noshrink,regret_noshrink,simp_val_noshrink)
fsml_compare(combined_noshrink,pe_noshrink,regret_noshrink,simp_val_noshrink,null_affect)
cs_draws <- combined_shrink$fit$draws()
mcmc_areas(
cs_draws,
area_method = "scaled height",
pars = c("dpiw_mu[1]","dpiw_mu[2]","dpiw_mu[3]","fpiw_mu[1]","fpiw_mu[2]","fpiw_mu[3]","fpiw_mu[4]"),
prob = 0.8, # 80% intervals
prob_outer = 0.95, # 99%
point_est = "mean"
)
mcmc_areas(
cs_draws,
area_method = "scaled height",
pars = c("dpiw_mu[1]","dpiw_mu[2]","dpiw_mu[3]","fpiw_mu[1]","fpiw_mu[2]","fpiw_mu[3]","fpiw_mu[4]"),
prob = 0.8, # 80% intervals
prob_outer = 0.9, # 99%
point_est = "mean"
)
mcmc_areas(
cs_draws,
area_method = "scaled height",
pars = c("fpiw_mu[4]"),
prob = 0.8, # 80% intervals
prob_outer = 0.95, # 99%
point_est = "mean"
)
mcmc_areas(
cs_draws,
area_method = "scaled height",
pars = c("fpiw_mu[4]"),
prob = 0.8, # 80% intervals
prob_outer = 0.9, # 99%
point_est = "mean"
)
"dpiw_mu[1]","dpiw_mu[2]","dpiw_mu[3]","fpiw_mu[1]","fpiw_mu[2]","fpiw_mu[3]",
mcmc_areas(
cs_draws,
area_method = "scaled height",
pars = c("dpiw_mu[1]","dpiw_mu[2]","dpiw_mu[3]","fpiw_mu[1]","fpiw_mu[2]","fpiw_mu[3]","fpiw_mu[4]"),
prob = 0.8, # 80% intervals
prob_outer = 0.9, # 99%
point_est = "mean"
)
mcmc_areas(
cs_draws,
area_method = "scaled height",
pars = c("fpiw_mu[4]"),
prob = 0.8, # 80% intervals
prob_outer = 0.9, # 99%
point_est = "mean"
)
mcmc_areas(
cs_draws,
area_method = "scaled height",
pars = c("fpiw_mu[3]"),
prob = 0.8, # 80% intervals
prob_outer = 0.9, # 99%
point_est = "mean"
)
mcmc_areas(
cs_draws,
area_method = "scaled height",
pars = c("fpiw_mu[4]"),
prob = 0.8, # 80% intervals
prob_outer = 0.9, # 99%
point_est = "mean"
)
mcmc_areas(
cs_draws,
area_method = "scaled height",
pars = c("fpiw_mu[1]"),
prob = 0.8, # 80% intervals
prob_outer = 0.9, # 99%
point_est = "mean"
)
mcmc_areas(
cs_draws,
area_method = "scaled height",
pars = c("fpiw_mu[1]"),
prob = 0.8, # 80% intervals
prob_outer = 0.9, # 99%
point_est = "mean"
)
"dpiw_mu[1]","dpiw_mu[2]","dpiw_mu[3]","fpiw_mu[1]","fpiw_mu[2]","fpiw_mu[3]",
mcmc_areas(
cs_draws,
area_method = "scaled height",
pars = c("dpiw_mu[1]","dpiw_mu[2]","dpiw_mu[3]","fpiw_mu[1]","fpiw_mu[2]","fpiw_mu[3]","fpiw_mu[4]"),
prob = 0.8, # 80% intervals
prob_outer = 0.9, # 99%
point_est = "mean"
)
mcmc_areas(
cs_draws,
area_method = "scaled height",
pars = c("dpiw_mu[1]","dpiw_mu[2]","dpiw_mu[3]","fpiw_mu[1]","fpiw_mu[2]","fpiw_mu[3]","fpiw_mu[4]"),
prob = 0.8, # 80% intervals
prob_outer = 0.9, # 99%
point_est = "mean"
)
combined_noshrink_noVQf <- read_fsml("combined_noshrink_noVQf")
combined_noshrink_noVQf
combined_noshrink_noVQf_fit <- load_cmdstan_fit("combined_noshrink_noVQf")
combined_noshrink_noVQf_fit <- load_cmdstan_fit("combined_noshrink_noVQf",model_out_dir="/Users/dp/projects/s22_follow_up/output/results/stan_model_fits/combined_noshrink_noVQf")
combined_noshrink_noVQf_fit <- load_cmdstan_fit("combined_noshrink_noVQf",model_out_dir="/Users/dp/projects/s22_follow_up/output/results/stan_model_fits/combined_noshrink_noVQf/")
combined_noshrink_noVQf_fit <- load_cmdstan_fit("combined_noshrink_noVQf",model_out_dir="/Users/dp/projects/s22_follow_up/output/results/stan_model_fits/")
combined_noshrink_noVQf$loo <- combined_noshrink_noVQf_fit$loo()
fsml_compare(combined_noshrink_noVQf,combined_noshrink)
combined_noshrink_noVQf <- list()
combined_noshrink_noVQf$loo <- combined_noshrink_noVQf_fit$loo()
fsml_compare(combined_noshrink_noVQf,pe_noshrink,regret_noshrink,simp_val_noshrink,null_affect)
knitr::opts_chunk$set(echo = TRUE)
options(mc.cores=12)
path_to_project_directory <- "~/projects/ARL_bv/"
path_to_arl <- "~/projects/ARL/"
path_to_s22 <- "~/projects/spring_2022_study/"
stan_model_dir<- paste0(path_to_project_directory,"code/stan_models/final_samp_mods/")
model_out_dir <- paste0(path_to_project_directory,"output/results/stan_model_fits/final_samp_fits/")
#load custom functions
source(paste0(path_to_s22,"code/functions/s22_utilities.R"))
source(paste0(path_to_s22,"code/functions/stan_utilities.R"))
source(paste0(path_to_arl,"code/functions/arl_utilities.R"))
source(paste0(path_to_project_directory,"code/functions/arlbv_utilities.R"))
source(paste0(path_to_s22,"code/functions/fit_stan_model.R"))
library(tidyverse)
library(cmdstanr)
library(loo)
library(bayesplot)
library(tidybayes)
library(lmerTest)
library(sigmoid)
mod_resid_sep <- read_fsml("mod_resid_sep",model_out_dir=model_out_dir)
mod_aff_resid <- read_fsml("mod_aff_resid",model_out_dir=model_out_dir)
fsml_compare(mod_aff_resid,mod_resid_sep)
fsml_compare(two_q,two_q_pe)
two_q <- read_fsml("two_q",model_out_dir=model_out_dir)
fsml_compare(two_q,two_q_pe)
two_q_pe <- read_fsml("two_q_pe",model_out_dir=model_out_dir)
fsml_compare(two_q,two_q_pe)
two_q_pe_comp <- read_fsml("two_q_pe_comp",model_out_dir=model_out_dir)
fsml_compare(two_q_pe_comp,two_q)
